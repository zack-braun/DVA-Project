var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import PlaygroundError from 'rsg-components/PlaygroundError';

import ReactExample from '../ReactExample';

/* eslint-disable no-invalid-this */

var Fragment = React.Fragment ? React.Fragment : 'div';

var Preview = function (_Component) {
	_inherits(Preview, _Component);

	function Preview() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Preview);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Preview.__proto__ || Object.getPrototypeOf(Preview)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			error: null
		}, _this.handleError = function (err) {
			_this.unmountPreview();

			_this.setState({
				error: err.toString()
			});

			console.error(err); // eslint-disable-line no-console
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Preview, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			// Clear console after hot reload, do not clear on the first load
			// to keep any warnings
			if (this.context.codeRevision > 0) {
				// eslint-disable-next-line no-console
				console.clear();
			}

			this.executeCode();
		}
	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(nextProps, nextState) {
			return this.state.error !== nextState.error || this.props.code !== nextProps.code;
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(prevProps) {
			if (this.props.code !== prevProps.code) {
				this.executeCode();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.unmountPreview();
		}
	}, {
		key: 'unmountPreview',
		value: function unmountPreview() {
			if (this.mountNode) {
				ReactDOM.unmountComponentAtNode(this.mountNode);
			}
		}
	}, {
		key: 'executeCode',
		value: function executeCode() {
			var _this2 = this;

			this.setState({
				error: null
			});

			var code = this.props.code;

			if (!code) {
				return;
			}

			var wrappedComponent = React.createElement(ReactExample, {
				code: code,
				evalInContext: this.props.evalInContext,
				onError: this.handleError,
				compilerConfig: this.context.config.compilerConfig
			});

			window.requestAnimationFrame(function () {
				_this2.unmountPreview();
				try {
					ReactDOM.render(wrappedComponent, _this2.mountNode);
				} catch (err) {
					_this2.handleError(err);
				}
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			var error = this.state.error;

			return React.createElement(
				Fragment,
				null,
				React.createElement('div', { ref: function ref(_ref2) {
						return _this3.mountNode = _ref2;
					} }),
				error && React.createElement(PlaygroundError, { message: error })
			);
		}
	}]);

	return Preview;
}(Component);

Preview.propTypes = {
	code: PropTypes.string.isRequired,
	evalInContext: PropTypes.func.isRequired
};
Preview.contextTypes = {
	config: PropTypes.object.isRequired,
	codeRevision: PropTypes.number.isRequired
};
export default Preview;