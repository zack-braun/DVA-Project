var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { transform } from 'buble';
import Wrapper from 'rsg-components/Wrapper';
import splitExampleCode from '../../utils/splitExampleCode';

/* eslint-disable no-invalid-this, react/no-multi-comp */

var FragmentTag = React.Fragment ? 'React.Fragment' : 'div';

var _compileCode = function _compileCode(code, config) {
	return transform(code, config).code;
};
var wrapCodeInFragment = function wrapCodeInFragment(code) {
	return '<' + FragmentTag + '>' + code + '</' + FragmentTag + '>;';
};

// Wrap everything in a React component to leverage the state management
// of this component

var StateHolder = function (_Component) {
	_inherits(StateHolder, _Component);

	function StateHolder() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, StateHolder);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StateHolder.__proto__ || Object.getPrototypeOf(StateHolder)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this.props.initialState, _this.setStateBinded = _this.setState.bind(_this), _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(StateHolder, [{
		key: 'render',
		value: function render() {
			return this.props.component(this.state, this.setStateBinded);
		}
	}]);

	return StateHolder;
}(Component);

StateHolder.propTypes = {
	component: PropTypes.func.isRequired,
	initialState: PropTypes.object.isRequired
};

var ReactExample = function (_Component2) {
	_inherits(ReactExample, _Component2);

	function ReactExample() {
		_classCallCheck(this, ReactExample);

		return _possibleConstructorReturn(this, (ReactExample.__proto__ || Object.getPrototypeOf(ReactExample)).apply(this, arguments));
	}

	_createClass(ReactExample, [{
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(nextProps) {
			return this.props.code !== nextProps.code;
		}

		// Eval the code to extract the value of the initial state

	}, {
		key: 'getExampleInitialState',
		value: function getExampleInitialState(compiledCode) {
			if (compiledCode.indexOf('initialState') === -1) {
				return {};
			}

			return this.props.evalInContext('\n\t\t\tvar state = {}, initialState = {};\n\t\t\ttry {\n\t\t\t\t' + compiledCode + ';\n\t\t\t} catch (err) {}\n\t\t\treturn initialState;\n\t\t')();
		}

		// Run example code and return the last top-level expression

	}, {
		key: 'getExampleComponent',
		value: function getExampleComponent(compiledCode) {
			return this.props.evalInContext('\n\t\t\tvar initialState = {};\n\t\t\t' + compiledCode + '\n\t\t');
		}
	}, {
		key: 'compileCode',
		value: function compileCode(code) {
			try {
				var wrappedCode = code.trim().match(/^</) ? wrapCodeInFragment(code) : code;
				return _compileCode(wrappedCode, this.props.compilerConfig);
			} catch (err) {
				if (this.props.onError) {
					this.props.onError(err);
				}
			}
			return false;
		}
	}, {
		key: 'render',
		value: function render() {
			var compiledCode = this.compileCode(this.props.code);
			if (!compiledCode) {
				return null;
			}

			var _splitExampleCode = splitExampleCode(compiledCode),
			    head = _splitExampleCode.head,
			    example = _splitExampleCode.example;

			var initialState = this.getExampleInitialState(head);
			var exampleComponent = this.getExampleComponent(example);
			var wrappedComponent = React.createElement(
				Wrapper,
				{ onError: this.props.onError },
				React.createElement(StateHolder, { component: exampleComponent, initialState: initialState })
			);
			return wrappedComponent;
		}
	}]);

	return ReactExample;
}(Component);

ReactExample.propTypes = {
	code: PropTypes.string.isRequired,
	evalInContext: PropTypes.func.isRequired,
	onError: PropTypes.func.isRequired,
	compilerConfig: PropTypes.object
};
ReactExample.contextTypes = {};
export default ReactExample;